name: build

on:
    push:
        tags:
            - 'v*'
        branches:
            - '**'
        paths:
            - '**/.config'
            - '.github/workflows/build.yaml'
            - '*.sh'
    workflow_dispatch:

jobs:
    meta:
        uses: ./.github/workflows/meta.yml

    sysroot:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                arch: [x64, arm64]
            fail-fast: false
        concurrency:
          group: ${{ github.workflow }}-sysroot-${{ matrix.arch }}

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Cache bare toolchain
              id: cache-bare-toolchain
              uses: actions/cache@v4
              with:
                path: |
                  maa-linux-toolchain-sysroot-${{ matrix.arch }}.tar.xz
                key: bare-toolchain-${{ matrix.arch }}-${{ hashFiles(format('{0}/.config', matrix.arch)) }}

            - name: Update system
              if: ${{ steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  sudo apt-get update
                  sudo apt-get remove --purge firefox
                  sudo apt-get upgrade
                  sudo apt-get install -y clang lld

            - name: Install deps
              if: ${{ success() && steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  sudo apt-get install -y build-essential automake texinfo flex bison help2man libtool-bin

            - name: Install ctng
              if: ${{ success() && steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  ./build-ctng.sh

            - name: Build toolchain
              if: ${{ success() && steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  cd ${{ matrix.arch }}
                  ../install-ctng/bin/ct-ng build
                  cd ..

            - name: Download llvm
              run: |
                  git clone https://github.com/llvm/llvm-project -b llvmorg-20.1.8 --depth 1
                  cmake llvm-project/runtimes -G Ninja -B ${{ matrix.arch }}/build-libcxx \
                    -DCMAKE_BUILD_TYPE=Release \
                    -DCMAKE_TOOLCHAIN_FILE=clang/build-libcxx-${{ matrix.arch }}.cmake \
                    -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
                    -DCMAKE_INSTALL_PREFIX=x-tools/${{ matrix.arch == x64 && "x86_64" || "aarch64" }}-linux-gnu/${{ matrix.arch == x64 && "x86_64" || "aarch64" }}-linux-gnu/sysroot/usr \
                    -DPython3_EXECUTABLE=/usr/bin/
                  cmake --build ${{ matrix.arch }}/build-libcxx -- -j 16
                  cmake --install ${{ matrix.arch }}/build-libcxx

            - name: Package toolchain
              if: ${{ success() && steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  tar Jcvf maa-linux-toolchain-sysroot-${{ matrix.arch }}.tar.xz x-tools

            - name: Upload toolchain
              uses: actions/upload-artifact@v4
              with:
                  name: MaaLinuxToolchain-${{ matrix.arch }}
                  path: maa-linux-toolchain-sysroot-${{ matrix.arch }}.tar.xz

            - name: Upload logs
              uses: actions/upload-artifact@v4
              if: ${{ steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              with:
                name: MaaLinuxToolchainLogs-${{ matrix.arch }}
                path: ${{ matrix.arch }}/build.log

    release:
        if: ${{ needs.meta.outputs.is_release == 'true' }}
        needs: [meta, sysroot]
        runs-on: ubuntu-latest
        env:
            OUTPUT_PUBLISH_FAILED: 'echo "failed=true" >> $GITHUB_OUTPUT && echo "::error::Failed to publish packages"'

        steps:
            - uses: actions/download-artifact@v4
              with:
                  path: assets

            - uses: softprops/action-gh-release@v2
              with:
                  files: assets/**/*.tar.xz
                  tag_name: ${{ needs.meta.outputs.tag }}
                  prerelease: ${{ needs.meta.outputs.is_pre_release == 'true' }}
                  generate_release_notes: true

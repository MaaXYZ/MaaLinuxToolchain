name: build

on:
    push:
        tags:
            - 'v*'
        branches:
            - '**'
        paths:
            - '**/.config'
            - '.github/workflows/build.yaml'
            - '*.sh'
            - 'clang/*.cmake'
            - 'test/*'
    workflow_dispatch:

jobs:
    meta:
        uses: ./.github/workflows/meta.yml

    sysroot:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                arch: [x64, arm64]
            fail-fast: false
        concurrency:
          group: ${{ github.workflow }}-sysroot-${{ matrix.arch }}

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true
                  lfs: true

            - name: Cache bare toolchain
              id: cache-bare-toolchain
              uses: actions/cache@v4
              with:
                path: |
                  maa-linux-toolchain-sysroot-${{ matrix.arch }}.tar.xz
                key: bare-toolchain-${{ matrix.arch }}-${{ hashFiles(format('{0}/.config', matrix.arch)) }}

            - name: Update system
              if: ${{ steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  sudo apt-get update
                  sudo apt-get remove --purge firefox
                  sudo apt-get upgrade

            - name: Install deps
              if: ${{ success() && steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  sudo apt-get install -y build-essential automake texinfo flex bison help2man libtool-bin

            - name: Install ctng
              if: ${{ success() && steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  ./build-ctng.sh

            - name: Build toolchain
              if: ${{ success() && steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  cd ${{ matrix.arch }}
                  ../install-ctng/bin/ct-ng build
                  cd ..

            - name: Package toolchain
              if: ${{ success() && steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              run: |
                  tar Jcvf maa-linux-toolchain-sysroot-${{ matrix.arch }}.tar.xz x-tools

            - name: Upload toolchain
              uses: actions/upload-artifact@v4
              with:
                  name: MaaLinuxToolchainSysroot-${{ matrix.arch }}
                  path: maa-linux-toolchain-sysroot-${{ matrix.arch }}.tar.xz

            - name: Upload logs
              uses: actions/upload-artifact@v4
              if: ${{ steps.cache-bare-toolchain.outputs.cache-hit != 'true' }}
              with:
                name: MaaLinuxToolchainLogs-${{ matrix.arch }}
                path: ${{ matrix.arch }}/build.log

    clang:
        needs: [sysroot]
        runs-on: ubuntu-latest
        concurrency:
          group: ${{ github.workflow }}-clang

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true
                  lfs: true

            - uses: actions/download-artifact@v4
              with:
                  path: assets

            - name: Unpack sysroot
              run: |
                for pack in assets/**/*.tar.xz; do
                  tar Jvxf $pack
                done
                ls x-tools

            - name: Clone clang
              run: |
                ./clone-llvm.sh

            - name: Cache clang stage1
              id: cache-clang-stage1
              uses: actions/cache/restore@v4
              with:
                path: |
                  clang-stage1.tar.xz
                key: clang-stage1-${{ hashFiles('x64/.config', 'build-clang-stage1.sh', 'clang/stage1.cmake') }}

            - name: Build clang stage1
              if: ${{ steps.cache-clang-stage1.outputs.cache-hit != 'true' }}
              run: |
                ./build-clang-stage1.sh && tar Jcf clang-stage1.tar.xz stage1

            - name: Save clang stage1
              if: ${{ success() && steps.cache-clang-stage1.outputs.cache-hit != 'true' }}
              id: cache-clang-stage1-save
              uses: actions/cache/save@v4
              with:
                path: |
                  clang-stage1.tar.xz
                key: clang-stage1-${{ hashFiles('x64/.config', 'build-clang-stage1.sh', 'clang/stage1.cmake') }}

            - name: Unpack clang stage1
              if: ${{ steps.cache-clang-stage1.outputs.cache-hit == 'true' }}
              run: |
                tar Jxf clang-stage1.tar.xz

            - name: Validate clang stage1
              # should use libstdc++
              run: |
                stage1/bin/clang++ test/main.cpp -o test/main && ldd test/main && test/main

            - name: Build libcxx stage1
              run: |
                ./build-libcxx-stage1.sh

            - name: Validate clang stage1 libcxx
              # should use libc++
              run: |
                stage1/bin/clang++ test/main.cpp -o test/main --stdlib=libc++ --rtlib=compiler-rt --unwindlib=libunwind -Wl,--rpath=x-tools/x86_64-linux-gnu/x86_64-linux-gnu/sysroot/lib && ldd test/main && test/main

            - name: Cache clang stage2
              id: cache-clang-stage2
              uses: actions/cache/restore@v4
              with:
                path: |
                  clang-stage2.tar.xz
                key: clang-stage2-${{ hashFiles('x64/.config', 'build-clang-stage1.sh', 'clang/stage1.cmake', 'build-libcxx-stage1.sh', 'clang/stage1-with-libs.cmake', 'build-clang-stage2.sh', 'clang/stage1-build-stage2.cmake') }}

            - name: Build clang stage2
              if: ${{ steps.cache-clang-stage2.outputs.cache-hit != 'true' }}
              run: |
                ./build-clang-stage2.sh && tar Jcf clang-stage2.tar.xz stage2

            - name: Save clang stage2
              if: ${{ success() && steps.cache-clang-stage2.outputs.cache-hit != 'true' }}
              id: cache-clang-stage2-save
              uses: actions/cache/save@v4
              with:
                path: |
                  clang-stage2.tar.xz
                key: clang-stage2-${{ hashFiles('x64/.config', 'build-clang-stage1.sh', 'clang/stage1.cmake', 'build-libcxx-stage1.sh', 'clang/stage1-with-libs.cmake', 'build-clang-stage2.sh', 'clang/stage1-build-stage2.cmake') }}

            - name: Unpack clang stage2
              if: ${{ steps.cache-clang-stage2.outputs.cache-hit == 'true' }}
              run: |
                tar Jxf clang-stage2.tar.xz

            - name: Validate clang stage2
              # should use libc++
              run: |
                stage2/bin/clang++ test/main.cpp -o test/main -Wl,--rpath=x-tools/x86_64-linux-gnu/x86_64-linux-gnu/sysroot/lib && ldd test/main && test/main

            - name: Build libcxx stage2 x64
              run: |
                ./build-libcxx-stage2-x64.sh

            - name: Build libcxx stage2 arm64
              run: |
                ./build-libcxx-stage2-arm64.sh

            - name: Move tools
              run: |
                mv stage2 x-tools/tools

            - name: Package toolchain
              run: |
                  tar Jcvf maa-linux-toolchain.tar.xz x-tools

            - name: Upload toolchain
              uses: actions/upload-artifact@v4
              with:
                  name: MaaLinuxToolchain
                  path: maa-linux-toolchain.tar.xz

    release:
        if: ${{ needs.meta.outputs.is_release == 'true' }}
        needs: [meta, sysroot, clang]
        runs-on: ubuntu-latest
        env:
            OUTPUT_PUBLISH_FAILED: 'echo "failed=true" >> $GITHUB_OUTPUT && echo "::error::Failed to publish packages"'

        steps:
            - uses: actions/download-artifact@v4
              with:
                  path: assets

            - uses: softprops/action-gh-release@v2
              with:
                  files: assets/**/*.tar.xz
                  tag_name: ${{ needs.meta.outputs.tag }}
                  prerelease: ${{ needs.meta.outputs.is_pre_release == 'true' }}
                  generate_release_notes: true
